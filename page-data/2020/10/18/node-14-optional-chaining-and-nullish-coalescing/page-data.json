{"componentChunkName":"component---src-templates-post-js","path":"/2020/10/18/node-14-optional-chaining-and-nullish-coalescing/","result":{"data":{"markdownRemark":{"html":"<h3>Node 14</h3>\n<p>Node 14 is already released and will become the <a href=\"https://nodejs.org/en/about/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">next LTS version</a> during the last week of October 2020.</p>\n<p>Node 14 is coming with two long awaited JS features, optional chaining and nullish coalescing. Let's check them out!</p>\n<h3>Optional chaining</h3>\n<p>Long gone will be the days of checking for the existence of a deeply nested property using the <code>&#x26;&#x26;</code> operator or <a href=\"https://lodash.com/docs/4.17.15#get\" target=\"_blank\" rel=\"noopener noreferrer\">lodash.get</a>.</p>\n<p>The optional chaining operator is <code>?.</code> and it permits accessing any nested property in a safe way with a single expression.</p>\n<p>Example:</p>\n<pre><code>// Using the &#x26;&#x26; operator\nif (foo &#x26;&#x26; foo.bar &#x26;&#x26; foo.bar.baz) {\n  // do something with foo.bar.baz\n}\n\n// Using the ?. operator\nif (foo?.bar?.baz) {\n  // do something with foo.bar.baz\n}\n</code></pre>\n<h3>Nullish coalescing</h3>\n<p>The nullish coalescing logical operator is <code>??</code> and it returns the right-hand side operand only if the left-hand side operand is <code>null</code> or <code>undefined</code>.</p>\n<p>This sounds similar to the logical <code>OR (||)</code> operator, however the <code>||</code> operator returns the right-hand side operand when the left-hand side is any <code>falsy</code> value.</p>\n<p>Thus for many cases that a default value has to be assigned only when a value is <code>null</code> or <code>undefined</code>, the nullish coalescing operator comes in handy.</p>\n<p>Example:</p>\n<pre><code>const foo = 0;\nconsole.log(foo || 10); // 10\nconsole.log(foo ?? 10); // 0\n\nconst bar = false;\nconsole.log(bar || true); // true\nconsole.log(bar ?? true); // false\n\nconst baz = '';\nconsole.log(baz || 'default'); // 'default'\nconsole.log(baz ?? 'default'); // ''\n</code></pre>\n<h3>Native ESLint support</h3>\n<p>ESLint has native support for optional chaining and nullish coalescing since 7.5.0 version. However to enable the new syntax it requires the following configuration:</p>\n<pre><code>{\n  \"parserOptions\": {\n    \"ecmaVersion\": 2020\n  }\n}\n</code></pre>","frontmatter":{"title":"Node 14 - Optional chaining and nullish coalescing","date":"18 Oct 2020"}}},"pageContext":{}},"staticQueryHashes":["2875828811"],"slicesMap":{}}