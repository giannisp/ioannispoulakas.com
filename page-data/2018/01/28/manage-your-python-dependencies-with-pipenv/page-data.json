{"componentChunkName":"component---src-templates-post-js","path":"/2018/01/28/manage-your-python-dependencies-with-pipenv/","result":{"data":{"markdownRemark":{"html":"<p>Python developers rejoice!<br>\n<a href=\"http://pipenv.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">Pipenv</a> is a dependency manager for Python projects.<br>\nIt works similarly to other popular dependency managers, like npm for NodeJS, or bundler for Ruby.<br>\nPipenv combines and streamlines the use of <code>pip</code> and <code>virtualenv</code>.</p>\n<h3>Getting started</h3>\n<p>Pipenv can be installed via pip:<br>\n<code>pip install --user pipenv</code></p>\n<p>If on macOS, I'd recommend installing Pipenv via brew:<br>\n<code>brew install pipenv</code></p>\n<h3>Initialize a pipenv environment for any Python project</h3>\n<p>Initialize a Pipenv environment with Python 2.x:<br>\n<code>pipenv --two</code></p>\n<p>Initialize a Pipenv environment with Python 3.x:<br>\n<code>pipenv --three</code></p>\n<p>Notice that a new file will be created named <code>Pipfile</code>.<br>\nThis file is similar to a <code>Gemfile</code> or <code>package.json</code> on Ruby and NodeJS respectively.\n<code>Pipfile</code> lists all top level dependencies grouped into <code>packages</code> and <code>dev-packages</code>.</p>\n<h3>Installing Python dependencies</h3>\n<p>Let's suppose that the popular library <code>requests</code> is a requirement.</p>\n<p>Install the latest <code>requests</code> version:<br>\n<code>pipenv install requests</code></p>\n<p>or install a specific <code>requests</code> version:<br>\n<code>pipenv install requests==2.18.4</code></p>\n<p>or install a package for dev purposes:<br>\n<code>pipenv install nosetests --dev</code></p>\n<p>In all cases the <code>Pipfile</code> will get updated, with either a <code>*</code> version, or the specific requested version.<br>\nIn addition to the <code>Pipfile</code>, a new file named <code>Pipfile.lock</code> will be created.<br>\nThis file is similar to <code>Gemfile.lock</code> or <code>package-lock.json</code> on Ruby and NodeJS respectively.<br>\n<code>Pipfile.lock</code> lists all top level dependencies as well as any sub-dependencies.</p>\n<p>It's very important to commit and keep both <code>Pipfile</code> and <code>Pipfile.lock</code> files under version control, as these will be used to re-create the virtualenv by fellow contributors or via a deployment script etc.</p>\n<h3>Displaying Python dependencies</h3>\n<p>Apart from inspecting <code>Pipfile</code> and <code>Pipfile.lock</code> files, there is a handy Pipenv feature:<br>\n<code>pipenv graph</code></p>\n<h3>Running Python commands</h3>\n<p>The only downside of Pipenv, is that all Python commands need to be prefixed by <code>pipenv run</code>, for example:<br>\n<code>pipenv run python --version</code></p>\n<p>or<br>\n<code>pipenv run python app.py</code></p>\n<h3>Virtualenv shell shortcut</h3>\n<p>Pipenv has a nice little feature that spawns a bash shell within the virtualenv:<br>\n<code>pipenv shell</code></p>\n<p>Running <code>python</code> on the spawned bash shell, will start a Python shell within the virtualenv.<br>\nIf for example <code>requests</code> package was installed, <code>import requests</code> will just work.</p>\n<h3>Uninstalling Python dependencies</h3>\n<p>Uninstall a specific package:<br>\n<code>pipenv uninstall requests</code></p>\n<p>or uninstall all packages:<br>\n<code>pipenv uninstall --all</code></p>\n<h3>Remove a Pipenv virtualenv</h3>\n<p>Clean up a virtualenv:<br>\n<code>pipenv --rm</code></p>\n<h3>Re-create a Pipenv virtualenv from Pipfile/Pipfile.lock</h3>\n<p>Create a Pipenv virtualenv and install all dependencies is as simple as:<br>\n<code>pipenv install</code></p>\n<h3>Is pyenv still relevant?</h3>\n<p>Pipenv is just a dependency manager, <code>pyenv</code> is still relevant for managing different Python versions.<br>\nMoreover Pipenv supports installing Python versions with <code>pyenv</code> when needed.</p>\n<h3>Conclusion</h3>\n<p>Pipenv is a great tool, something that was really missing from the Python ecosystem. I am already using it in production, and I highly recommend it.</p>","frontmatter":{"title":"How to manage your Python dependencies with Pipenv","date":"28 Jan 2018"}}},"pageContext":{}},"staticQueryHashes":["2875828811"],"slicesMap":{}}